set_names(group_by(h2,patient) %>% group_keys() %>% unlist)
h3 <- h2 %>% group_split(patient) %>% map(function(x){
tpx <- unique(x$timepoint)
# find top `topNum` clonotypes from each timepoint for each patient
cdr <- map(tpx,function(tp){
y <- filter(x,timepoint==tp)
if(nrow(y) >= topNum){
cdr <- slice_max(y,order_by=n,n=topNum,with_ties=F) %>% .$cdr3
}
else cdr <- y$cdr3
}) %>% unlist() %>% unique()
# list mapping timepoint to number of contigs
tpnMap <- map_dbl(tpx,
~filter(x,timepoint==.x) %>% .$n %>% sum()) %>%
set_names(as.character(tpx))
# find all rows with top clonotypes and add proportion column
map_dfr(cdr, ~filter(x,cdr3==.x)) %>%
mutate(prop=100*n/(tpnMap[as.character(timepoint)]))
}) %>%
set_names(group_by(h2,patient) %>% group_keys() %>% unlist)
trackClones <- function(df){
df %>% mutate(year=as.Date.character(timepoint,format='%d')) %>%
streamgraph('cdr3','prop','year') %>%
sg_axis_x(2,'day','%d') %>%
sg_legend(show=T)
}
trackClones(h3$`20`)
trackClones(h3$`21`)
trackClones(h3$`22`)
trackClones(h3$`23`)
trackClones(h3$`24`)
trackClones(h3$`25`)
trackClones(h3$`2`)
trackClones(h3$`3`)
trackClones(h3$`4`)
trackClones(h3$`5`)
trackClones(h3$`6`)
trackClones(h3$`7`)
trackClones(h3$`8`)
trackClones(h3$`9`)
trackClones(h3$`10`)
library(magrittr)
library(tidyverse)
library(CellaRepertorium)
# WORKFLOW - load, QC, filter, rerun QC, ...
fList <- list.files('data_tcr')
tempData <- data.frame()
for (file in fList) {
tempData <- data.table::fread(paste0('data_tcr/',file)) %>%
select(-one_of('V1')) %>%
mutate(patient=str_extract(file,'(?<=^PEM)\\d+'),
timepoint=str_extract(file,'(?<=C)\\d')) %>%
rbind(tempData,.)
}
dat <- ContigCellDB_10XVDJ(tempData,
contig_pk=c('barcode','contig_id','patient','timepoint'),
cell_pk=c('barcode','patient','timepoint'))
# ok this is lazy and has a bunch of cell characteristics in the contig tbl and duplicated id info, but it would be a mess to differentiate barcodes and transfer stuff to cell_tbl so I'm not going to
dat %<>% mutate_cdb(productive=case_when(
toupper(as.character(productive))=='TRUE'~T,
toupper(as.character(productive))=='FALSE'~F,
toupper(as.character(productive))=='NONE'~NA,
))
# filter all cells, high_conf, not multichain (too many chains for one cell?), productive, full_length (?), and cdr3 > 7 aa's (also excludes Nones)
dat %<>% filter_cdb(is_cell,high_confidence,chain %in% c('TRA','TRB')
,productive,full_length,nchar(cdr3)>6)
tab_umi <- crosstab_by_celltype(dat) %>%
full_join(dat@contig_tbl,by=c('barcode','patient','timepoint')) %>%
filter(!is.na(is_cell))
# adds in number of t_ab sequences for each cell barcode
mark <- map(list.files('data_sc/mark2/'), function(p){
p2 <- paste0('data_sc/mark2/',p)
readRDS(p2)
})
# mark %<>% set_names(paste0('c', list.files('data_sc/mark/') %>%
# str_extract('\\d+')))
mark %<>% set_names(paste0('c', list.files('data_sc/mark2/') %>%
str_extract('(?<=mark2_)\\d+')))
sf <- function(genes,id=NULL,return=F,xcel=F){
if(!is.null(id)){
df <- mark[[id]]
if(return){
mark[[id]][rownames(mark[[id]]) %in% toupper(genes),]
}
else{
for(g in genes){
print(rownames(df)[str_detect(rownames(df),toupper(g))])
}
}
}
else{
if(return){
dat <- map_dfr(names(mark),function(n){
m <- mark[[n]]
m[rownames(m) %in% toupper(genes),] %>% as.data.frame() %>%
mutate(clust=str_extract(n,'[0-9]+') %>% as.integer())
}) %>%
mutate(positivity=avg_logFC>0)
if(xcel){
dat %>% select(avg_logFC,clust) %>%
full_join(tibble(clust=0:(length(list.files('data_sc/mark2'))-1)),by=c('clust'='clust')) #%>%
# arrange(clust) %>% .$avg_logFC
# paste(.,'',collapse='')
}
else{dat}
}
else{
for(n in names(mark)){
m <- mark[[n]]
print(paste('####',n,'####'))
for (g in genes) {
print(rownames(m)[str_detect(rownames(m),toupper(g))])
}
}
}
}
}
# meta <- readRDS('data_sc/metadata.rds')
mark2 <- readRDS('data_sc/all_markers2.rds')
mark2$positivity <- ifelse(mark2$avg_logFC>0,T,F)
mark2$cluster %>% table() %>% view()
topMarkers <- map_dfr(levels(mark2$cluster),function(l){
mark2[mark2$cluster==l,][1:10,]
})
require(vegan)
# create diversity dataframe
divData <- data.frame(group_by(dat@contig_tbl,patient,timepoint) %>%
group_keys(),
'contigs'=group_split(dat@contig_tbl,patient,timepoint) %>% map_dbl(nrow))
# add shannon, invsimp and hill indices
divData$shannon <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity)
divData$invSimp <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity(index='invsimpson'))
hillNums <- c(0,0.5,1,2,4,8)
divData$hill <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map(~.x$cdr3 %>% table() %>% unlist() %>%
renyi(scales=hillNums,hill=T))
require(streamgraph)
# counts of each cdr3 by patient x timepoint
h2 <- dat@contig_tbl %>% dplyr::count(patient,timepoint,cdr3,sort=T)
topNum <- 7 #top clones from each timepoint to look at
h3 <- h2 %>% group_split(patient) %>% map(function(x){
tpx <- unique(x$timepoint)
# find top `topNum` clonotypes from each timepoint for each patient
cdr <- map(tpx,function(tp){
y <- filter(x,timepoint==tp)
if(nrow(y) >= topNum){
cdr <- slice_max(y,order_by=n,n=topNum,with_ties=F) %>% .$cdr3
}
else cdr <- y$cdr3
}) %>% unlist() %>% unique()
# list mapping timepoint to number of contigs
tpnMap <- map_dbl(tpx,
~filter(x,timepoint==.x) %>% .$n %>% sum()) %>%
set_names(as.character(tpx))
# find all rows with top clonotypes and add proportion column
map_dfr(cdr, ~filter(x,cdr3==.x)) %>%
mutate(prop=100*n/(tpnMap[as.character(timepoint)]))
}) %>%
set_names(group_by(h2,patient) %>% group_keys() %>% unlist)
trackClones <- function(df){
df %>% mutate(year=as.Date.character(timepoint,format='%d')) %>%
streamgraph('cdr3','prop','year') %>%
sg_axis_x(2,'day','%d') %>%
sg_legend(show=T)
}
# plot hill numbers
divData$hill %>% as.data.frame() %>% t() %>%
set_colnames(paste0('hill',hillNums)) %>%
as.data.frame() %>%
mutate(p=divData$patient,t=divData$timepoint) %>%
pivot_longer(cols=paste0('hill',hillNums)) %>%
mutate(name=factor(name,levels=paste0('hill',hillNums))) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))
trackClones(h3$`9`)
trackClones(h3$`10`)
trackClones(h3$`19`)
trackClones(h3$`10`)
trackClones(h3$`2`)
trackClones(h3$`19`)
trackClones(h3$`2`)
trackClones(h3$`4`)
trackClones(h3$`5`)
?coxph
library(magrittr)
library(tidyverse)
# library(Seurat)
mark <- map(list.files('data_sc/mark2/'), function(p){
p2 <- paste0('data_sc/mark2/',p)
readRDS(p2)
})
# mark %<>% set_names(paste0('c', list.files('data_sc/mark/') %>%
# str_extract('\\d+')))
mark %<>% set_names(paste0('c', list.files('data_sc/mark2/') %>%
str_extract('(?<=mark2_)\\d+')))
sf <- function(genes,id=NULL,return=F,xcel=F){
if(!is.null(id)){
df <- mark[[id]]
if(return){
mark[[id]][rownames(mark[[id]]) %in% toupper(genes),]
}
else{
for(g in genes){
print(rownames(df)[str_detect(rownames(df),toupper(g))])
}
}
}
else{
if(return){
dat <- map_dfr(names(mark),function(n){
m <- mark[[n]]
m[rownames(m) %in% toupper(genes),] %>% as.data.frame() %>%
mutate(clust=str_extract(n,'[0-9]+') %>% as.integer())
}) %>%
mutate(positivity=avg_logFC>0)
if(xcel){
dat %>% select(avg_logFC,clust) %>%
full_join(tibble(clust=0:(length(list.files('data_sc/mark2'))-1)),by=c('clust'='clust')) #%>%
# arrange(clust) %>% .$avg_logFC
# paste(.,'',collapse='')
}
else{dat}
}
else{
for(n in names(mark)){
m <- mark[[n]]
print(paste('####',n,'####'))
for (g in genes) {
print(rownames(m)[str_detect(rownames(m),toupper(g))])
}
}
}
}
}
# meta <- readRDS('data_sc/metadata.rds')
mark2 <- readRDS('data_sc/all_markers2.rds')
mark2$positivity <- ifelse(mark2$avg_logFC>0,T,F)
topMarkers <- map_dfr(levels(mark2$cluster),function(l){
mark2[mark2$cluster==l,][1:10,]
})
mark2 %>% dim()
mark2
mark2 %>% filter(cluster==14)
mark2 %>% filter(cluster==14) %>% view()
mark$c2 %>% view()
dat <- readRDS('data_sc/dat_scaled2.rds')
dat %<>% as.data.frame() %>% set_colnames(paste0('c',0:33)) %>%
multiply_by(100)
require(magrittr)
require(tidyverse)
qdb <- function(gs,ordering=T){
# returns the expression data for the genes (gs) ordered by summed expression
# require(gt)
gs <- toupper(gs)
gs[!(gs %in% rownames(dat))] %>% paste('Not present:',.) %>%
print()
gs <- gs[gs %in% rownames(dat)]
if(length(gs)==1){
if(ordering) dat[gs,order(-dat[gs,])]
else dat[gs,]
} else{
if(ordering) dat[gs,order(-colSums(dat[gs,]))] #%>% gt(rownames_to_stub=T)
else dat[gs,] #%>% gt(rownames_to_stub=T)
}
}
dat %>% dim()
dat %>% names()
h1 <- dat$c14
library(limma)
alias2Symbol('CD69')
alias2Symbol('CD103')
alias2Symbol(c('CD27','CD95','CD122'))
library(magrittr)
library(tidyverse)
library(CellaRepertorium)
# WORKFLOW - load, QC, filter, rerun QC, ...
fList <- list.files('data_tcr')
tempData <- data.frame()
for (file in fList) {
tempData <- data.table::fread(paste0('data_tcr/',file)) %>%
select(-one_of('V1')) %>%
mutate(patient=str_extract(file,'(?<=^PEM)\\d+'),
timepoint=str_extract(file,'(?<=C)\\d')) %>%
rbind(tempData,.)
}
dat <- ContigCellDB_10XVDJ(tempData,
contig_pk=c('barcode','contig_id','patient','timepoint'),
cell_pk=c('barcode','patient','timepoint'))
# ok this is lazy and has a bunch of cell characteristics in the contig tbl and duplicated id info, but it would be a mess to differentiate barcodes and transfer stuff to cell_tbl so I'm not going to
dat %<>% mutate_cdb(productive=case_when(
toupper(as.character(productive))=='TRUE'~T,
toupper(as.character(productive))=='FALSE'~F,
toupper(as.character(productive))=='NONE'~NA,
))
cl <- readRDS('clinical.rds')
clResponse <- set_names(cl$response,cl$sample)
clLynch <- set_names(cl$lynch,cl$sample)
# filter all cells, high_conf, not multichain (too many chains for one cell?), productive, full_length (?), and cdr3 > 7 aa's (also excludes Nones)
dat %<>% filter_cdb(is_cell,high_confidence,chain %in% c('TRA','TRB')
,productive,full_length,nchar(cdr3)>6)
tab_umi <- crosstab_by_celltype(dat) %>%
full_join(dat@contig_tbl,by=c('barcode','patient','timepoint')) %>%
filter(!is.na(is_cell))
# adds in number of t_ab sequences for each cell barcode
require(vegan)
# create diversity dataframe
divData <- data.frame(group_by(dat@contig_tbl,patient,timepoint) %>%
group_keys(),
'contigs'=group_split(dat@contig_tbl,patient,timepoint) %>% map_dbl(nrow))
# add shannon, invsimp and hill indices
divData$shannon <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity)
divData$invSimp <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity(index='invsimpson'))
hillNums <- c(2,4,8,16)
divData$hill <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map(~.x$cdr3 %>% table() %>% unlist() %>%
renyi(scales=hillNums,hill=T))
# plot hill numbers
hillPlot <- divData$hill %>% as.data.frame() %>% t() %>%
set_colnames(paste0(hillNums)) %>%
as.data.frame() %>%
mutate(p=divData$patient,t=divData$timepoint) %>%
mutate(r=clResponse[as.character(p)],l=clLynch[as.character(p)]) %>%
pivot_longer(cols=paste0(hillNums)) %>%
mutate(name=factor(name,levels=paste0(hillNums)))
hillPlot %>% filter(l==T) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Lynch-Like')
hillPlot %>% filter(l==F) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Non-Lynch-Like')+scale_y_log10
hillPlot %>% filter(l==T) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Lynch-Like')+scale_y_log10()
hillPlot %>% filter(l==F) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Non-Lynch-Like')+scale_y_log10()
divData
ggplot(divData)+geom_col(aes(x=timepoint,y=shannon,group=interaction(patient)))
ggplot(divData)+geom_col(aes(x=timepoint,y=shannon,group=interaction(timepoint,patient)))
ggplot(divData)+geom_col(aes(y=shannon,group=interaction(timepoint,patient)))
ggplot(divData)+geom_col(aes(x=interaction(patient,timepoint),y=shannon,group=interaction(timepoint,patient)))
ggplot(divData)+geom_col(aes(x=interaction(patient,timepoint),y=shannon,color=patient))
ggplot(divData)+geom_col(aes(x=interaction(patient,timepoint),y=shannon,fill=patient))
ggplot(divData)+geom_col(aes(x=interaction(patient,timepoint),y=shannon,fill=patient),position='dodge')
ggplot(divData)+geom_col(aes(x=interaction(patient,timepoint),y=shannon,fill=patient),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=patient),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=patient,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=patient,group=interaction(patient,timepoint),alpha=0.5+0.1*timepoint),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=patient,group=interaction(patient,timepoint),alpha=timepoint),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=timepoint,color=patient,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=shannon,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))
ggplot(divData)+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_log10()
ggplot(divData)+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()
divGg <- ggplot(divData,aes(x=patient,fill=timepoint,group=interaction(patient,timepoint)))+theme(axis.text.x=element_text(angle=90))
divData %>% filter(timepoint %in% clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17])
divData %>% filter(timepoint %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17]))
divData %>% filter(timepoint %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17])) %>% .$timepoint
divData$timepoint
divData %>% filter(patient %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17]))
divData %>% filter(patient %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17])) %>% .$patient
divData %>% filter(patient %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17])) %>%
ggplot()+geom_col(aes(x=patient,y=shannon,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))
divData %>% filter(patient %in% (clLynch[clLynch=='FALSE'] %>% names() %>% .[1:17])) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()
divData %>% filter(patient %in% (clLynch[clLynch=='TRUE'] %>% names() %>% .[1:17])) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()
divData
divData2 <- divData %>% mutate(lynch=clLynch[patient],response=clResponse[patient])
divData2
hillNums <- c(0,0.5,1,2,4,8)
divData$hill <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map(~.x$cdr3 %>% table() %>% unlist() %>%
renyi(scales=hillNums,hill=T))
divData2 <- divData %>% mutate(lynch=clLynch[patient],response=clResponse[patient])
saveRDS(divData2,'divData2.rds')
hillNums <- c(2,4,8,16)
divData$hill <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map(~.x$cdr3 %>% table() %>% unlist() %>%
renyi(scales=hillNums,hill=T))
# create diversity dataframe
divData <- data.frame(group_by(dat@contig_tbl,patient,timepoint) %>%
group_keys(),
'contigs'=group_split(dat@contig_tbl,patient,timepoint) %>% map_dbl(nrow)) %>% mutate(lynch=clLynch[patient],response=clResponse[patient])
# add shannon, invsimp and hill indices
divData$shannon <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity)
divData$invSimp <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map_dbl(~.x$cdr3 %>% table() %>% unlist() %>% diversity(index='invsimpson'))
divData %>% filter(patient %in% (clLynch[clLynch=='TRUE'] %>% names() %>% .[1:17])) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()
divData %>% filter(lynch=='TRUE') %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()
divData %>% filter(lynch=='TRUE') %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(main='Lynch')
divData %>% filter(lynch=='TRUE') %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(title='Lynch')
ggsave('figures/lynch/invSimp.png')
ggsave('figures/lynch/invSimp.png',width=10,unit='in')
ggsave('figures/lynch/invSimp.png')
divData %>% filter(lynch=='FALSE') %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(title='Non-Lynch')
ggsave('figures/nonlynch/invSimp.png')
hillNums <- c(2,4,8,16)
divData$hill <- dat@contig_tbl %>% group_split(patient,timepoint) %>%
map(~.x$cdr3 %>% table() %>% unlist() %>%
renyi(scales=hillNums,hill=T))
saveRDS(divData,'divData2.rds')
# plot hill numbers
hillPlot <- divData$hill %>% as.data.frame() %>% t() %>%
set_colnames(paste0(hillNums)) %>%
as.data.frame() %>%
mutate(p=divData$patient,t=divData$timepoint) %>%
mutate(r=clResponse[as.character(p)],l=clLynch[as.character(p)]) %>%
pivot_longer(cols=paste0(hillNums)) %>%
mutate(name=factor(name,levels=paste0(hillNums)))
hillPlot %>% filter(l==T) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Lynch-Like')+scale_y_log10()
# plot hill numbers
hillPlot <- divData$hill %>% as.data.frame() %>% t() %>%
set_colnames(paste0(hillNums)) %>%
as.data.frame() %>%
mutate(p=divData$patient,t=divData$timepoint) %>%
pivot_longer(cols=paste0(hillNums)) %>%
mutate(name=factor(name,levels=paste0(hillNums)))
hillPlot
# plot hill numbers
hillPlot <- divData$hill %>% as.data.frame() %>% t() %>%
set_colnames(paste0(hillNums)) %>%
as.data.frame() %>%
mutate(p=divData$patient,t=divData$timepoint) %>%
mutate(r=clResponse[as.character(p)],l=clLynch[as.character(p)]) %>%
pivot_longer(cols=paste0(hillNums)) %>%
mutate(name=factor(name,levels=paste0(hillNums)))
hillPlot
hillPlot %>% filter(l==T) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Diversity for Lynch-Like')+scale_y_log10()
hillPlot %>% filter(l==T) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Lynch')+scale_y_log10()
ggsave('figures/lynch/hillHigh.png')
hillPlot %>% filter(l==F) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Lynch')+scale_y_log10()
hillPlot %>% filter(l==F) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Non-Lynch')+scale_y_log10()
ggsave('figures/nonlynch/hillHigh.png')
divData$response
divData$response %>% unique()
# response %in% c('CR','PR')
# response %in% c('SD','PD')
divData %>% filter(response %in% c('CR','PR')) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(title='Responders')
ggsave('figures/resp/invSimp.png')
# response %in% c('CR','PR')
# response %in% c('SD','PD')
divData %>% filter(response %in% c('SD','PD')) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(title='Non-Responders')
ggsave('figures/nonresp/invSimp.png')
hillPlot %>% filter(r %in% c('CR','PR')) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Responders')+scale_y_log10()
ggsave('figures/resp/hillHigh.png')
# response %in% c('CR','PR')
# response %in% c('SD','PD')
divData %>% filter(response %in% c('SD','PD')) %>%
ggplot()+geom_col(aes(x=patient,y=invSimp,fill=timepoint,group=interaction(patient,timepoint)),position='dodge')+theme(axis.text.x=element_text(angle=90))+scale_y_sqrt()+labs(title='Non-Responders')
hillPlot %>% filter(r %in% c('SD','PD')) %>%
ggplot()+geom_line(aes(name,value,col=p,group=interaction(p,t),linetype=t))+facet_wrap(~p)+scale_linetype_manual(values=c('solid','longdash','dotdash'))+labs(x='hill numbers',title='Non-Responders')+scale_y_log10()
ggsave('figures/nonresp/hillHigh.png')
ggsave('figures/nonresp/hillHigh.png',width=2000,height=1000,units='px')
ggsave('figures/nonresp/hillHigh.png',width=10,height=4,units='in')
clResponse[clResponse %in% c('CR','PR')] %>% names()
for (i in clResponse[clResponse %in% c('CR','PR')] %>% names() %>% .[1:13]) {
trackClones(h3[[i]]) %>% htmlwidgets::saveWidget('temp.html')
webshot::webshot('temp.html',paste0('figures/resp/','c',i,'.png'))
}
require(streamgraph)
# counts of each cdr3 by patient x timepoint
h2 <- dat@contig_tbl %>% dplyr::count(patient,timepoint,cdr3,sort=T)
topNum <- 7 #top clones from each timepoint to look at
h3 <- h2 %>% group_split(patient) %>% map(function(x){
tpx <- unique(x$timepoint)
# find top `topNum` clonotypes from each timepoint for each patient
cdr <- map(tpx,function(tp){
y <- filter(x,timepoint==tp)
if(nrow(y) >= topNum){
cdr <- slice_max(y,order_by=n,n=topNum,with_ties=F) %>% .$cdr3
}
else cdr <- y$cdr3
}) %>% unlist() %>% unique()
# list mapping timepoint to number of contigs
tpnMap <- map_dbl(tpx,
~filter(x,timepoint==.x) %>% .$n %>% sum()) %>%
set_names(as.character(tpx))
# find all rows with top clonotypes and add proportion column
map_dfr(cdr, ~filter(x,cdr3==.x)) %>%
mutate(prop=100*n/(tpnMap[as.character(timepoint)]))
}) %>%
set_names(group_by(h2,patient) %>% group_keys() %>% unlist)
trackClones <- function(df){
df %>% mutate(year=as.Date.character(timepoint,format='%d')) %>%
streamgraph('cdr3','prop','year') %>%
sg_axis_x(2,'day','%d') %>%
sg_legend(show=T)
}
for (i in clResponse[clResponse %in% c('CR','PR')] %>% names() %>% .[1:13]) {
trackClones(h3[[i]]) %>% htmlwidgets::saveWidget('temp.html')
webshot::webshot('temp.html',paste0('figures/resp/','c',i,'.png'))
}
clResponse[clResponse %in% c('SD','PD')] %>% names()
clResponse[clResponse %in% c('SD','PD')] %>% names() %>% length()
for (i in clResponse[clResponse %in% c('SD','PD')] %>% names() %>% .[1:9]) {
trackClones(h3[[i]]) %>% htmlwidgets::saveWidget('temp.html')
webshot::webshot('temp.html',paste0('figures/nonresp/','c',i,'.png'))
}
