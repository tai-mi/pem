chordDiagram(repOv,col=colorFunct,directional=1,link.arr.type='big.arrow',
direction.type=c('diffHeight','arrows'),diff.height=mm_h(-2))
}
circosOverlap('5')
circosOverlap <- function(p){
circos.clear()
repOv <- rep$data[rep$meta$patient %in% p] %>%
repOverlap(.method='jaccard',.col='aa')
colorFunct <- colorRamp2(
c(max(repOv,na.rm=T),median(repOv,na.rm=T),min(repOv,na.rm=T)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(repOv,col=colorFunct,directional=1,link.arr.type='big.arrow',
direction.type=c('diffHeight','arrows'),diff.height=-mm_h(2))
}
circosOverlap('5')
circosOverlap <- function(p){
circos.clear()
repOv <- rep$data[rep$meta$patient %in% p] %>%
repOverlap(.method='jaccard',.col='aa')
colorFunct <- colorRamp2(
c(max(repOv,na.rm=T),median(repOv,na.rm=T),min(repOv,na.rm=T)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(repOv,col=colorFunct,directional=1,link.arr.type='big.arrow',
direction.type=c('diffHeight','arrows'),diffHeight=mm_h(-2))
}
circosOverlap('5')
circosOverlap <- function(p){
circos.clear()
repOv <- rep$data[rep$meta$patient %in% p] %>%
repOverlap(.method='jaccard',.col='aa')
colorFunct <- colorRamp2(
c(max(repOv,na.rm=T),median(repOv,na.rm=T),min(repOv,na.rm=T)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(repOv,col=colorFunct,directional=1,link.arr.type='big.arrow',
direction.type=c('diffHeight','arrows'))
}
circosOverlap('11')
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til']
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% barplot()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.numeric()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.numeric() %>% barplot()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.vector() %>% barplot()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.data.frame()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.data.frame() %>% rownames_to_column()
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.data.frame() %>% rownames_to_column() %>%
ggplot()+geom_col(aes(rowname,`.`))
ggplot()+geom_col(aes(rowname,`.`,fill=rowname))
repOverlap(rep$data[rep$meta$patient=='3'],'jaccard','aa')[,'3-til'] %>% na.omit() %>% as.data.frame() %>% rownames_to_column() %>%
ggplot()+geom_col(aes(rowname,`.`,fill=rowname))
barOverlap <- function(p){
rep$data[rep$meta$patient %in% p] %>%
repOverlap(.,.method='jaccard',.col='aa')[,paste0(p,'-til')] %>%
na.omit() %>% as.data.frame() %>% rownames_to_column() %>%
set_colnames(c('Timepoint','Jaccard Similarity')) %>%
ggplot(aes(Timepoint,,`Jaccard Similarity`,fill=Timepoint))+
geom_col()
}
barOverlap('5')
barOverlap <- function(p){
repOverlap(rep$data[rep$meta$patient %in% p],
.method='jaccard',.col='aa')[,paste0(p,'-til')] %>%
na.omit() %>% as.data.frame() %>% rownames_to_column() %>%
set_colnames(c('Timepoint','Jaccard Similarity')) %>%
ggplot(aes(Timepoint,,`Jaccard Similarity`,fill=Timepoint))+
geom_col()
}
barOverlap('5')
barOverlap <- function(p){
repOverlap(rep$data[rep$meta$patient %in% p],
.method='jaccard',.col='aa')[,paste0(p,'-til')] %>%
na.omit() %>% as.data.frame() %>% rownames_to_column() %>%
set_colnames(c('Timepoint','Jaccard Similarity')) %>%
ggplot(aes(Timepoint,`Jaccard Similarity`,fill=Timepoint))+
geom_col()
}
barOverlap('5')
barOverlap('13')
repOverlap(rep$data,'jaccard','aa')
repOverlap(rep$data[rep$meta$timepoint!='healthy'],'jaccard','aa')
rep$meta$timepoint %>% unique()
repOverlap(rep$data[rep$meta$timepoint!='h'],'jaccard','aa')
filter(rep$meta,timepoint=='til') %>% .$patient
filter(rep$meta,timepoint=='til')$patient
rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)
rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa')
barOv <- repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa')
pivot_longer(barOv)
reshape2::melt(barOv)
reshape2::melt(barOv) %>% names()
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'))
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T))
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+'))
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>% ggplot()+geom_col(aes(Var1,value,fill=Var2))
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>% ggplot()+geom_col(aes(Var1,value,fill=Var2),position='dodge')
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>% ggplot()+geom_col(aes(Var1,value,fill=Var2),position='dodge')+theme(axis.text.x=element_text(angle=90))
reshape2::melt(barOv) %>% filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>% mutate(timepoint=str_extract(Var2,'.$')) %>% ggplot()+geom_col(aes(Var1,value,fill=timepoint),position='dodge')+theme(axis.text.x=element_text(angle=-90))
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt(barOv) %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient')
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt(barOv)
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient')
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')
# barplot of jaccard relative to til for all patients
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')+
ggridges::geom_density_ridges()
circosOverlap <- function(p){
circos.clear()
repOv <- rep$data[rep$meta$patient %in% p] %>%
repOverlap(.method='jaccard',.col='aa')
colorFunct <- colorRamp2(
c(max(repOv,na.rm=T),median(repOv,na.rm=T),min(repOv,na.rm=T)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(repOv,col=colorFunct,directional=1,link.arr.type='big.arrow',
direction.type=c('diffHeight','arrows'))
}
circosOverlap(1)
circosOverlap(10)
circosOverlap(10)
circosOverlap(10)
circosOverlap(1)
circosOverlap(c(1:5))
# barplot of jaccard relative to til for all patients
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')+
#circos spectratype
circosSpectra <- function(mask1,ab){
# mask for which of repdata and whether a or b
require(circlize)
vj <- map_dfr(rep$data[mask1],~.x) %>% select(Clones,J.name,V.name) %>%
filter(str_starts(V.name,paste0('TR',toupper(ab),'V')),
str_starts(J.name,paste0('TR',toupper(ab),'J'))) %>%
na.omit() %>% group_by(J.name,V.name) %>%
summarise(total=sum(Clones))
temp1 <- vj %>% group_by(V.name) %>% summarise(total=sum(total))
vj$V.name[vj$V.name %in% temp1$V.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'V-other')
temp1 <- vj %>% group_by(J.name) %>% summarise(total=sum(total))
vj$J.name[vj$J.name %in% temp1$J.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'J-other')
circos.clear()
circos.par(gap.degree=0,
gap.after=c(rep(0.2,length(unique(vj$J.name))-1),5,
rep(0.2,length(unique(vj$V.name))-1),5))
colorFunct <- colorRamp2(
c(max(vj$total),median(vj$total),min(vj$total)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(vj,annotationTrack='grid',
preAllocateTracks=1,
col=colorFunct,link.sort=T,)
circos.trackPlotRegion(track.index = 1,panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter,CELL_META$ylim[1],CELL_META$sector.index,
facing = "clockwise", niceFacing=T,
cex=0.7,track.index=1,adj=c(0,0.5))
# circos.axis(h = "top", labels.cex = 0.5, major.tick.length = 0.1,
#             sector.index=CELL_META$sector.index, track.index = 2)
}, bg.border = NA)
}
# barplot of jaccard relative to til for all patients
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')+
#circos spectratype
circosSpectra <- function(mask1,ab){
# mask for which of repdata and whether a or b
require(circlize)
vj <- map_dfr(rep$data[mask1],~.x) %>% select(Clones,J.name,V.name) %>%
filter(str_starts(V.name,paste0('TR',toupper(ab),'V')),
str_starts(J.name,paste0('TR',toupper(ab),'J'))) %>%
na.omit() %>% group_by(J.name,V.name) %>%
summarise(total=sum(Clones))
temp1 <- vj %>% group_by(V.name) %>% summarise(total=sum(total))
vj$V.name[vj$V.name %in% temp1$V.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'V-other')
temp1 <- vj %>% group_by(J.name) %>% summarise(total=sum(total))
vj$J.name[vj$J.name %in% temp1$J.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'J-other')
circos.clear()
circos.par(gap.degree=0,
gap.after=c(rep(0.2,length(unique(vj$J.name))-1),5,
rep(0.2,length(unique(vj$V.name))-1),5))
colorFunct <- colorRamp2(
c(max(vj$total),median(vj$total),min(vj$total)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(vj,annotationTrack='grid',
preAllocateTracks=1,
col=colorFunct,link.sort=T,)
circos.trackPlotRegion(track.index = 1,panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter,CELL_META$ylim[1],CELL_META$sector.index,
facing = "clockwise", niceFacing=T,
cex=0.7,track.index=1,adj=c(0,0.5))
# circos.axis(h = "top", labels.cex = 0.5, major.tick.length = 0.1,
#             sector.index=CELL_META$sector.index, track.index = 2)
}, bg.border = NA)
}
# barplot of jaccard relative to til for all patients
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')+
#circos spectratype
circosSpectra <- function(mask1,ab){
# mask for which of repdata and whether a or b
require(circlize)
vj <- map_dfr(rep$data[mask1],~.x) %>% select(Clones,J.name,V.name) %>%
filter(str_starts(V.name,paste0('TR',toupper(ab),'V')),
str_starts(J.name,paste0('TR',toupper(ab),'J'))) %>%
na.omit() %>% group_by(J.name,V.name) %>%
summarise(total=sum(Clones))
temp1 <- vj %>% group_by(V.name) %>% summarise(total=sum(total))
vj$V.name[vj$V.name %in% temp1$V.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'V-other')
temp1 <- vj %>% group_by(J.name) %>% summarise(total=sum(total))
vj$J.name[vj$J.name %in% temp1$J.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'J-other')
circos.clear()
circos.par(gap.degree=0,
gap.after=c(rep(0.2,length(unique(vj$J.name))-1),5,
rep(0.2,length(unique(vj$V.name))-1),5))
colorFunct <- colorRamp2(
c(max(vj$total),median(vj$total),min(vj$total)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(vj,annotationTrack='grid',
preAllocateTracks=1,
col=colorFunct,link.sort=T,)
circos.trackPlotRegion(track.index = 1,panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter,CELL_META$ylim[1],CELL_META$sector.index,
facing = "clockwise", niceFacing=T,
cex=0.7,track.index=1,adj=c(0,0.5))
# circos.axis(h = "top", labels.cex = 0.5, major.tick.length = 0.1,
#             sector.index=CELL_META$sector.index, track.index = 2)
}, bg.border = NA)
}
circosSpectra(rep$meta$timepoint %in% c('1'),'b')
# barplot of jaccard relative to til for all patients
repOverlap(rep$data[(rep$meta$timepoint!='healthy')&(rep$meta$patient %in% filter(rep$meta,timepoint=='til')$patient)],'jaccard','aa') %>%
reshape2::melt() %>%
filter(str_ends(Var1,'til'),str_ends(Var2,'til',negate=T),
str_extract(Var1,'^[0-9]+')==str_extract(Var2,'^[0-9]+')) %>%
mutate(timepoint=str_extract(Var2,'.$'),
Var1=str_extract(Var1,'^[0-9]+')) %>%
ggplot(aes(Var1,value,fill=timepoint))+geom_col(position='dodge')+
theme(axis.text.x=element_text(angle=-90))+
labs(y='Jaccard Similarity',x='Patient',
title='TIL-PBMC repertoire similarity')+
#circos spectratype
circosSpectra <- function(mask1,ab){
# mask for which of repdata and whether a or b
require(circlize)
vj <- map_dfr(rep$data[mask1],~.x) %>% select(Clones,J.name,V.name) %>%
filter(str_starts(V.name,paste0('TR',toupper(ab),'V')),
str_starts(J.name,paste0('TR',toupper(ab),'J'))) %>%
na.omit() %>% group_by(J.name,V.name) %>%
summarise(total=sum(Clones))
temp1 <- vj %>% group_by(V.name) %>% summarise(total=sum(total))
vj$V.name[vj$V.name %in% temp1$V.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'V-other')
temp1 <- vj %>% group_by(J.name) %>% summarise(total=sum(total))
vj$J.name[vj$J.name %in% temp1$J.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'J-other')
circos.clear()
circos.par(gap.degree=0,
gap.after=c(rep(0.2,length(unique(vj$J.name))-1),5,
rep(0.2,length(unique(vj$V.name))-1),5))
colorFunct <- colorRamp2(
c(max(vj$total),median(vj$total),min(vj$total)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(vj,annotationTrack='grid',
preAllocateTracks=1,
col=colorFunct,link.sort=T,)
circos.trackPlotRegion(track.index = 1,panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter,CELL_META$ylim[1],CELL_META$sector.index,
facing = "clockwise", niceFacing=T,
cex=0.7,track.index=1,adj=c(0,0.5))
# circos.axis(h = "top", labels.cex = 0.5, major.tick.length = 0.1,
#             sector.index=CELL_META$sector.index, track.index = 2)
}, bg.border = NA)
}
circosSpectra <- function(mask1,ab){
# mask for which of repdata and whether a or b
require(circlize)
vj <- map_dfr(rep$data[mask1],~.x) %>% select(Clones,J.name,V.name) %>%
filter(str_starts(V.name,paste0('TR',toupper(ab),'V')),
str_starts(J.name,paste0('TR',toupper(ab),'J'))) %>%
na.omit() %>% group_by(J.name,V.name) %>%
summarise(total=sum(Clones))
temp1 <- vj %>% group_by(V.name) %>% summarise(total=sum(total))
vj$V.name[vj$V.name %in% temp1$V.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'V-other')
temp1 <- vj %>% group_by(J.name) %>% summarise(total=sum(total))
vj$J.name[vj$J.name %in% temp1$J.name[temp1$total<(sum(temp1$total)/100)]] <- paste0('TR',toupper(ab),'J-other')
circos.clear()
circos.par(gap.degree=0,
gap.after=c(rep(0.2,length(unique(vj$J.name))-1),5,
rep(0.2,length(unique(vj$V.name))-1),5))
colorFunct <- colorRamp2(
c(max(vj$total),median(vj$total),min(vj$total)) %>% rev(),
RColorBrewer::brewer.pal(3,'YlOrRd'),transparency=0.4)
chordDiagram(vj,annotationTrack='grid',
preAllocateTracks=1,
col=colorFunct,link.sort=T,)
circos.trackPlotRegion(track.index = 1,panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter,CELL_META$ylim[1],CELL_META$sector.index,
facing = "clockwise", niceFacing=T,
cex=0.7,track.index=1,adj=c(0,0.5))
# circos.axis(h = "top", labels.cex = 0.5, major.tick.length = 0.1,
#             sector.index=CELL_META$sector.index, track.index = 2)
}, bg.border = NA)
}
rep$meta$lynch
circosSpectra(rep$meta$lynch,'b')
circosSpectra(rep$meta$coarse,'b')
rep$meta$coarse
circosSpectra(rep$meta$coarse=='til','b')
circosSpectra(rep$meta$coarse=='pbmc','b')
circosSpectra(rep$meta$coarse=='h','b')
circosSpectra(!rep$meta$lynch,'b')
a <- 1:10
b <- a
c <- b
d <- 1:10
library(lobstr)
obj_addr(a)
obj_addr(b)
obj_addr(c)
obj_addr(d)
obj_addr(mean)
obj_addr(base:mean)
obj_addr(base::mean)
obj_addr(get('mean'))
obj_addr(evalq(mean))
obj_addr(match.fun('mean'))
?read.csv()
?object.size
?obj_size
library(Seurat)
install.packages('Seurat')
?Seurat::FindIntegrationAnchors
?Seurat::FindIntegrationAnchors
?Seurat::IntegrateData
library(Seurat)
?RunPCA
install.packages('BiocManager')
BiocManager::install('fgsea')
install.packages('installr')
installr::updater()
install.packages('pacman')
pacman::p_install(c('tidyverse','BiocManager'))
pacman::p_install('Seurat','future','Matrix')
pacman::p_install(c('Seurat','future','Matrix'))
pacman::p_install(c('immunarch','CellaRepertorium'))
install.packages('immunarch')
BiocManager::install('fgsea')
BiocManager::install('gage')
BiocManager::install('fgsea')
library(magrittr)
library(CellaRepertorium)
library(immunarch)
library(tidyverse)
install.packages('CellaRepertorium')
library(magrittr)
library(CellaRepertorium)
library(immunarch)
library(tidyverse)
rep1 <- readRDS('data_misc/rep1.rds')
dat <- readRDS('data_misc/dat.rds')
# takes df (already filtered to one set to analyze)
toImmunarch <- function(df){
nTot <- nrow(df)
df <- add_count(df,cdr3)
df[!duplicated(df$cdr3),] %>% select(
Clones=n,
CDR3.nt=cdr3_nt,
CDR3.aa=cdr3,
V.name=v_gene,
D.name=d_gene,
J.name=j_gene,
patient,
timepoint
) %>% mutate(
V.end=NA,
D.start=NA,
D.end=NA,
J.start=NA,
VJ.ins=NA,
VD.ins=NA,
DJ.ins=NA,
Sequence=NA,.after=6) %>%
mutate(Proportion=Clones/nTot,.after=1) %>%
arrange(desc(Clones))
}
# tracks clonotypes across pbmc and til timepoints
trackCl2 <- function(p,...){
require(immunarch)
p <- as.character(p)
temp <- filter(dat@contig_tbl,patient==p) %>%
group_split(timepoint) %>%
map(~toImmunarch(.x))
temp %<>% set_names(filter(dat@contig_tbl,patient==p) %>%
group_by(timepoint) %>% group_keys() %>% unlist())
if(p %in% names(rep1$data)) temp$til <- rep1$data[[p]]
trackClonotypes(temp,...)
}
combining <- function(dat1){
dat1@cell_tbl$combined <-
paste(dat1@cell_tbl$barcode,
dat1@cell_tbl$patient %>% str_replace('^[a-zA-Z].*','healthy'),
tidyr::replace_na(dat1$cell_tbl$timepoint,''),
sep='_')
dat1@contig_tbl$combined <-
paste(dat1@contig_tbl$barcode,
dat1@contig_tbl$patient %>% str_replace('^[a-zA-Z].*','healthy'),
tidyr::replace_na(dat1$contig_tbl$timepoint,''),
sep='_')
dat1
}
dat <- readRDS('data_misc/dat_healthy.rds')
install.packages('devtools')
install.packages('Seurat')
install.packages('tidyverse')
pacman::p_install(c('magrittr','CellaRepertorium','pheatmap','cowplot','gridExtra'))
pacman::p_install('BiocManager','SingleR')
pacman::p_install(c('BiocManager','SingleR'))
install.packages('BiocManager')
BiocManager::install('CellaRepertorium')
BiocManager::install('SingleR')
BiocManager::install('SingleCellExperiment')
devtools::install_github("immunomind/immunarch", ref="dev")
devtools::install_github("immunomind/immunarch", ref="dev")
immunarch
devtools::install_github("immunomind/immunarch", ref="dev")
library(Seurat)
install.packages('monocle3')
BiocManager::install('monocle')
library('monocle')
library(monocle)
?clusterCall
?clusterCells
BiocManager::install('monocle3')
devtools::install_github('immunomind/immunarch',ref='dev')
immunarch::vis()
?immunarch::vis()
stringr::str_replace_all('CD8 Exhausted Progenitor',' ','_')
for(i in 1:3) i
for(i in 1:3) print(i)
library(tidyverse)
library(Seurat)
library(immunarch)
library(CellaRepertorium)
?CellaRepertorium::canonicalize_cell
devtools::install_github("gadenbuie/rsthemes")
devtools::install_github("gadenbuie/rsthemes")
rsthemes::try_rsthemes()
rsthemes::install_rsthemes()
rsthemes::list_rsthemes()
rsthemes::try_rsthemes()
rstudioapi::applyTheme('Material  Ocean {rsthemes}')
rstudioapi::applyTheme('Material Ocean {rsthemes}')
?png
